function [methodinfo,structs,enuminfo,ThunkLibName]=xeneth64_proto
%XENETH64_PROTO Create structures to define interfaces found in 'XCamera'.

%This function was generated by loadlibrary.m parser version 1.1.6.37 on Tue Feb 25 18:09:52 2014
%perl options:'XCamera.i -outfile=xeneth64_proto.m -thunkfile=xeneth64_thunk.c -header=XCamera.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'xeneth64_thunk');
% XCHANDLE  __stdcall XC_OpenCamera ( const char * pCameraName , XStatus pCallBack , void * pUser ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='XC_OpenCamera'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% void  __stdcall XC_CloseCamera ( XCHANDLE hnd ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='XC_CloseCamera'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% void  __stdcall XC_GetDeviceList ( char * pList , int iMaxLen ); 
fcns.thunkname{fcnNum}='voidcstringint32Thunk';fcns.name{fcnNum}='XC_GetDeviceList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
% voidp  __stdcall XC_HandleToCamera ( XCHANDLE hHandle ); 
fcns.thunkname{fcnNum}='voidPtrint32Thunk';fcns.name{fcnNum}='XC_HandleToCamera'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% XCHANDLE  __stdcall XC_CameraToHandle ( voidp cam ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='XC_CameraToHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int  __stdcall XC_ErrorToString ( ErrCode e , char * dst , int len ); 
fcns.thunkname{fcnNum}='int32ulongcstringint32Thunk';fcns.name{fcnNum}='XC_ErrorToString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'int32'};fcnNum=fcnNum+1;
% boole  __stdcall XC_IsInitialised ( XCHANDLE h ); 
fcns.thunkname{fcnNum}='uint8int32Thunk';fcns.name{fcnNum}='XC_IsInitialised'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% dword  __stdcall XC_GetWidth ( XCHANDLE h ); 
fcns.thunkname{fcnNum}='ulongint32Thunk';fcns.name{fcnNum}='XC_GetWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% dword  __stdcall XC_GetHeight ( XCHANDLE h ); 
fcns.thunkname{fcnNum}='ulongint32Thunk';fcns.name{fcnNum}='XC_GetHeight'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% dword  __stdcall XC_GetMaxWidth ( XCHANDLE h ); 
fcns.thunkname{fcnNum}='ulongint32Thunk';fcns.name{fcnNum}='XC_GetMaxWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% dword  __stdcall XC_GetMaxHeight ( XCHANDLE h ); 
fcns.thunkname{fcnNum}='ulongint32Thunk';fcns.name{fcnNum}='XC_GetMaxHeight'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% boole  __stdcall XC_IsCapturing ( XCHANDLE h ); 
fcns.thunkname{fcnNum}='uint8int32Thunk';fcns.name{fcnNum}='XC_IsCapturing'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_StartCapture ( XCHANDLE h ); 
fcns.thunkname{fcnNum}='ulongint32Thunk';fcns.name{fcnNum}='XC_StartCapture'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_StopCapture ( XCHANDLE h ); 
fcns.thunkname{fcnNum}='ulongint32Thunk';fcns.name{fcnNum}='XC_StopCapture'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% FilterID  __stdcall XC_AddImageFilter ( XCHANDLE h , XImageFilter flt , void * parm ); 
fcns.thunkname{fcnNum}='ulongint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='XC_AddImageFilter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_MsgImageFilter ( XCHANDLE h , FilterID fid , XFilterMessage msg , void * msgparm ); 
fcns.thunkname{fcnNum}='ulongint32ulongXFilterMessagevoidPtrThunk';fcns.name{fcnNum}='XC_MsgImageFilter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'ulong', 'XFilterMessage', 'voidPtr'};fcnNum=fcnNum+1;
% void  __stdcall XC_RemImageFilter ( XCHANDLE h , FilterID fid ); 
fcns.thunkname{fcnNum}='voidint32ulongThunk';fcns.name{fcnNum}='XC_RemImageFilter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'ulong'};fcnNum=fcnNum+1;
% void  __stdcall XC_PriImageFilter ( XCHANDLE h , FilterID fid , int prio ); 
fcns.thunkname{fcnNum}='voidint32ulongint32Thunk';fcns.name{fcnNum}='XC_PriImageFilter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'ulong', 'int32'};fcnNum=fcnNum+1;
% boole  __stdcall XC_IsFilterRunning ( XCHANDLE h , FilterID fid ); 
fcns.thunkname{fcnNum}='uint8int32ulongThunk';fcns.name{fcnNum}='XC_IsFilterRunning'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'int32', 'ulong'};fcnNum=fcnNum+1;
% void  __stdcall XC_Blit ( XCHANDLE h , void * w , int x , int y , int width , int height , BlitType type ); 
fcns.thunkname{fcnNum}='voidint32voidPtrint32int32int32int32BlitTypeThunk';fcns.name{fcnNum}='XC_Blit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'voidPtr', 'int32', 'int32', 'int32', 'int32', 'BlitType'};fcnNum=fcnNum+1;
% void  __stdcall XC_SetColourMode ( XCHANDLE h , ColourMode mode ); 
fcns.thunkname{fcnNum}='voidint32ColourModeThunk';fcns.name{fcnNum}='XC_SetColourMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'ColourMode'};fcnNum=fcnNum+1;
% ColourMode  __stdcall XC_GetColourMode ( XCHANDLE h ); 
fcns.thunkname{fcnNum}='ColourModeint32Thunk';fcns.name{fcnNum}='XC_GetColourMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ColourMode'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_LoadColourProfile ( XCHANDLE h , const char * p_cFileName ); 
fcns.thunkname{fcnNum}='ulongint32cstringThunk';fcns.name{fcnNum}='XC_LoadColourProfile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% voidp  __stdcall XC_GetFilterFrame ( XCHANDLE h ); 
fcns.thunkname{fcnNum}='voidPtrint32Thunk';fcns.name{fcnNum}='XC_GetFilterFrame'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% FrameType  __stdcall XC_GetFrameType ( XCHANDLE h ); 
fcns.thunkname{fcnNum}='FrameTypeint32Thunk';fcns.name{fcnNum}='XC_GetFrameType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FrameType'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% dword  __stdcall XC_GetFrameSize ( XCHANDLE h ); 
fcns.thunkname{fcnNum}='ulongint32Thunk';fcns.name{fcnNum}='XC_GetFrameSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% byte  __stdcall XC_GetBitSize ( XCHANDLE h ); 
fcns.thunkname{fcnNum}='uint8int32Thunk';fcns.name{fcnNum}='XC_GetBitSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% dword  __stdcall XC_GetMaxValue ( XCHANDLE h ); 
fcns.thunkname{fcnNum}='ulongint32Thunk';fcns.name{fcnNum}='XC_GetMaxValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_GetFrame ( XCHANDLE h , FrameType type , unsigned long ulFlags , void * buffer , unsigned int size ); 
fcns.thunkname{fcnNum}='ulongint32FrameTypeulongvoidPtruint32Thunk';fcns.name{fcnNum}='XC_GetFrame'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'FrameType', 'ulong', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% dword  __stdcall XC_GetFrameCount ( XCHANDLE h ); 
fcns.thunkname{fcnNum}='ulongint32Thunk';fcns.name{fcnNum}='XC_GetFrameCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% double  __stdcall XC_GetFrameRate ( XCHANDLE h ); 
fcns.thunkname{fcnNum}='doubleint32Thunk';fcns.name{fcnNum}='XC_GetFrameRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_SaveData ( XCHANDLE h , const char * p_cFileName , unsigned long ulFlags ); 
fcns.thunkname{fcnNum}='ulongint32cstringulongThunk';fcns.name{fcnNum}='XC_SaveData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_LoadSettings ( XCHANDLE h , const char * p_cFileName ); 
fcns.thunkname{fcnNum}='ulongint32cstringThunk';fcns.name{fcnNum}='XC_LoadSettings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_LoadCalibration ( XCHANDLE h , const char * p_cFileName , unsigned long ulFlags ); 
fcns.thunkname{fcnNum}='ulongint32cstringulongThunk';fcns.name{fcnNum}='XC_LoadCalibration'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_SaveSettings ( XCHANDLE h , const char * p_cFileName ); 
fcns.thunkname{fcnNum}='ulongint32cstringThunk';fcns.name{fcnNum}='XC_SaveSettings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_GetPath ( XCHANDLE h , int iPath , char * pPath , int iMaxLen ); 
fcns.thunkname{fcnNum}='ulongint32int32cstringint32Thunk';fcns.name{fcnNum}='XC_GetPath'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  __stdcall XC_GetPropertyCount ( XCHANDLE h ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='XC_GetPropertyCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_GetPropertyName ( XCHANDLE h , int iIndex , char * pPropName , int iMaxLen ); 
fcns.thunkname{fcnNum}='ulongint32int32cstringint32Thunk';fcns.name{fcnNum}='XC_GetPropertyName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_GetPropertyRange ( XCHANDLE h , const char * pPrp , char * pRange , int iMaxLen ); 
fcns.thunkname{fcnNum}='ulongint32cstringcstringint32Thunk';fcns.name{fcnNum}='XC_GetPropertyRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_GetPropertyRangeL ( XCHANDLE h , const char * pPrp , long * pLow , long * pHigh ); 
fcns.thunkname{fcnNum}='ulongint32cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='XC_GetPropertyRangeL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'cstring', 'longPtr', 'longPtr'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_GetPropertyRangeF ( XCHANDLE h , const char * pPrp , double * pLow , double * pHigh ); 
fcns.thunkname{fcnNum}='ulongint32cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='XC_GetPropertyRangeF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_GetPropertyType ( XCHANDLE h , const char * pPrp , XPropType * pPropType ); 
fcns.thunkname{fcnNum}='ulongint32cstringvoidPtrThunk';fcns.name{fcnNum}='XC_GetPropertyType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'cstring', 'XPropTypePtr'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_GetPropertyCategory ( XCHANDLE h , const char * pPrp , char * pCategory , int iMaxLen ); 
fcns.thunkname{fcnNum}='ulongint32cstringcstringint32Thunk';fcns.name{fcnNum}='XC_GetPropertyCategory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_GetPropertyUnit ( XCHANDLE h , const char * pPrp , char * pUnit , int iMaxLen ); 
fcns.thunkname{fcnNum}='ulongint32cstringcstringint32Thunk';fcns.name{fcnNum}='XC_GetPropertyUnit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_SetPropertyValue ( XCHANDLE h , const char * pPrp , const char * pValue , const char * pUnit ); 
fcns.thunkname{fcnNum}='ulongint32cstringcstringcstringThunk';fcns.name{fcnNum}='XC_SetPropertyValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_SetPropertyValueL ( XCHANDLE h , const char * pPrp , long lValue , const char * pUnit ); 
fcns.thunkname{fcnNum}='ulongint32cstringlongcstringThunk';fcns.name{fcnNum}='XC_SetPropertyValueL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'cstring', 'long', 'cstring'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_SetPropertyValueF ( XCHANDLE h , const char * pPrp , double dValue , const char * pUnit ); 
fcns.thunkname{fcnNum}='ulongint32cstringdoublecstringThunk';fcns.name{fcnNum}='XC_SetPropertyValueF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'cstring', 'double', 'cstring'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_SetPropertyBlob ( XCHANDLE h , const char * pPrp , const char * pValue , unsigned int len ); 
fcns.thunkname{fcnNum}='ulongint32cstringcstringuint32Thunk';fcns.name{fcnNum}='XC_SetPropertyBlob'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'uint32'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_GetPropertyValue ( XCHANDLE h , const char * pPrp , char * pValue , int iMaxLen ); 
fcns.thunkname{fcnNum}='ulongint32cstringcstringint32Thunk';fcns.name{fcnNum}='XC_GetPropertyValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_GetPropertyValueL ( XCHANDLE h , const char * pPrp , long * pValue ); 
fcns.thunkname{fcnNum}='ulongint32cstringvoidPtrThunk';fcns.name{fcnNum}='XC_GetPropertyValueL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_GetPropertyValueF ( XCHANDLE h , const char * pPrp , double * pValue ); 
fcns.thunkname{fcnNum}='ulongint32cstringvoidPtrThunk';fcns.name{fcnNum}='XC_GetPropertyValueF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_GetPropertyBlob ( XCHANDLE h , const char * pPrp , char * pValue , unsigned int len ); 
fcns.thunkname{fcnNum}='ulongint32cstringcstringuint32Thunk';fcns.name{fcnNum}='XC_GetPropertyBlob'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'uint32'};fcnNum=fcnNum+1;
% ErrCode  __stdcall XC_QueueProperties ( XCHANDLE h , bool tf ); 
fcns.thunkname{fcnNum}='ulongint32boolThunk';fcns.name{fcnNum}='XC_QueueProperties'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32', 'bool'};fcnNum=fcnNum+1;
% dword  __stdcall XC_GetFrameFooterLength ( XCHANDLE h ); 
fcns.thunkname{fcnNum}='ulongint32Thunk';fcns.name{fcnNum}='XC_GetFrameFooterLength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
structs.XPFF.packing=1;
structs.XPFF.members=struct('len', 'uint16', 'ver', 'uint16', 'soc', 'int64', 'tft', 'int64', 'tfc', 'ulong', 'fltref', 'ulong', 'hfl', 'ulong');
enuminfo.XLoadCalibrationFlags=struct('XLC_StartSoftwareCorrection',1,'XLC_RFU_1',2,'XLC_RFU_2',4,'XLC_RFU_3',8);
enuminfo.XStatusMessage=struct('XSLoadLogic',1,'XSLoadVideoLogic',2,'XSDataStorage',3,'XSCorrection',4,'XSSelfStart',5,'XSMessage',6,'XSLoadGrabber',7);
enuminfo.FrameType=struct('FT_NATIVE',0,'FT_8_BPP_GRAY',1,'FT_16_BPP_GRAY',2,'FT_32_BPP_GRAY',3,'FT_32_BPP_RGBA',4,'FT_32_BPP_RGB',5,'FT_32_BPP_BGRA',6,'FT_32_BPP_BGR',7);
enuminfo.XDirectories=struct('XDir_FilterData',0,'XDir_ScriptRoot',1,'XDir_Calibrations',2,'XDir_InstallDir',3,'XDir_Plugins',4,'XDir_CachePath',5,'XDir_SdkResources',6,'XDir_Xeneth',7);
enuminfo.BlitType=struct('Window',0,'DeviceContext',1);
enuminfo.XPropType=struct('XType_None',0,'XType_Base_Mask',255,'XType_Attr_Mask',4294967040,'XType_Base_Number',1,'XType_Base_Enum',2,'XType_Base_Bool',4,'XType_Base_Blob',8,'XType_Base_String',16,'XType_Base_Action',32,'XType_Base_Rfu1',64,'XType_Base_Rfu2',128,'XType_Base_MinMax',8192,'XType_Base_ReadOnce',4096,'XType_Base_NoPersist',2048,'XType_Base_NAI',1024,'XType_Base_RW',768,'XType_Base_Writeable',512,'XType_Base_Readable',256,'XType_Number',513,'XType_Enum',514,'XType_Bool',516,'XType_Blob',520,'XType_String',528,'XType_Action',544,'XType_RO_Number',257,'XType_RO_Enum',258,'XType_RO_Bool',260,'XType_RO_Blob',264,'XType_RO_String',272,'XType_RW_Number',769,'XType_RW_Enum',770,'XType_RW_Bool',772,'XType_RW_Blob',776,'XType_RW_String',784);
enuminfo.XSaveSettingsFlags=struct('XSS_SaveReadables',1,'XSS_SaveGrabberProps',2,'XSS_SS_RFU_2',4,'XSS_SS_RFU_3',8);
enuminfo.ColourMode=struct('ColourMode_8',0,'ColourMode_16',1,'ColourMode_Profile',2,'ColourMode_Invert',256);
enuminfo.ErrorCodes=struct('I_OK',0,'I_DIRTY',1,'E_BUG',10000,'E_NOINIT',10001,'E_LOGICLOADFAILED',10002,'E_INTERFACE_ERROR',10003,'E_OUT_OF_RANGE',10004,'E_NOT_SUPPORTED',10005,'E_NOT_FOUND',10006,'E_FILTER_DONE',10007,'E_NO_FRAME',10008,'E_SAVE_ERROR',10009,'E_MISMATCHED',10010,'E_BUSY',10011,'E_INVALID_HANDLE',10012,'E_TIMEOUT',10013,'E_FRAMEGRABBER',10014,'E_NO_CONVERSION',10015,'E_FILTER_SKIP_FRAME',10016,'E_WRONG_VERSION',10017,'E_PACKET_ERROR',10018,'E_WRONG_FORMAT',10019,'E_WRONG_SIZE',10020,'E_CAPSTOP',10021,'E_RFU',10022);
enuminfo.XSaveDataFlags=struct('XSD_Force16',1,'XSD_Force8',2,'XSD_AlignLeft',4,'XSD_SaveThermalInfo',8,'XSD_RFU_0',16,'XSD_RFU_1',32,'XSD_RFU_2',64,'XSD_RFU_3',128);
enuminfo.XFilterMessage=struct('XMsgInit',0,'XMsgClose',1,'XMsgFrame',2,'XMsgGetName',3,'XMsgGetValue',4,'XMsgSave',5,'XMsgGetStatus',6,'XMsgUpdateViewPort',7,'XMsgCanProceed',8,'XMsgGetInfo',9,'XMsgSelect',10,'XMsgProcessedFrame',11,'XMsgTimeout',13,'XMsgIsBusy',16,'XMsgSetTROI',17,'XMsgLoad',18,'XMsgUnload',19,'XMsgADUToTemp',12,'XMsgGetEN',14,'XMsgSetEN',15,'XMsgTempToADU',20,'XMsgGetTValue',21,'XMsgSerialise',100,'XMsgDeserialise',101,'XMsgGetPriority',102,'XMsgSetFilterState',104,'XMsgIsSerialiseDirty',105,'XMsgStoreHandle',106,'XMsgUpdateTint',107,'XMsgLinADUToTemp',109,'XMsgLinTempToADU',110,'XMsgUpdateSpan',111,'XMsgUpdatePalette',112,'XMsgDrawOverlay',200,'XMsgLineariseOutput',201,'XMsgSetEmiMap',202,'XMsgSetEmiMapUser',203,'XMsgGetEmiMap',204,'XMsgClrEmiMap',205,'XMsgClrEmiMapUser',206,'XMsgPushRange',207,'XMsgThmFilterState',208,'XMsgThmAdjustSet',209,'XMsgThmAdjustGet',210,'XMsgLog',211,'XMsgGetDeltaT',212,'XMsgGetTintRange',213,'XMsgUser',24200);
enuminfo.XGetFrameFlags=struct('XGF_Blocking',1,'XGF_NoConversion',2,'XGF_FetchPFF',4,'XGF_RFU_1',8,'XGF_RFU_2',16,'XGF_RFU_3',32);
enuminfo.XLoadSettingsFlags=struct('XSS_IgnoreNAIS',1,'XSS_LS_RFU_1',2,'XSS_LS_RFU_2',4,'XSS_LS_RFU_3',8);
methodinfo=fcns;